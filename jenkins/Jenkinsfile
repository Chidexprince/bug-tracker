pipeline {
    agent any

    stages {

        stage('Execute Unit Tests - Execute in Parallel') {
           parallel {
               stage('Unit Tests - Backend') {
                    agent {
                        docker {
                            image 'snakee/golang-junit:1.21'
                            reuseNode true
                        }
                    }
                    steps {
                    dir('bugtracker-backend') {
                            sh '''
                                # Set Go cache to a writable location
                                export GOCACHE="$PWD/.cache/go-build"
                                export GOMODCACHE="$PWD/.cache/go-mod"
                                
                                # Create cache directories
                                mkdir -p "$GOCACHE" "$GOMODCACHE"
                                
                                # Run the tests
                                go test -v ./... 2>&1 | go-junit-report > test-results.xml

                                # Generate coverage report
                                go test -coverprofile=coverage.out -covermode=atomic ./...
                                go tool cover -html=coverage.out -o coverage.html

                                # Move the test results to the report directory
                                mkdir -p reports
                                mv coverage.html reports/
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-backend/test-results.xml'
                            publishHTML target: [
                                reportName: 'Backend Coverage Report',
                                reportDir: 'bugtracker-backend/reports',
                                reportFiles: 'coverage.html',
                            ]
                        }
                    }
                }

                stage('Unit Tests - Frontend') {
                    agent {
                        docker {
                            image 'node:20-alpine'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('bugtracker-frontend') {
                            sh '''
                                # Install dependencies and run tests
                                npm ci
                                npm test

                                # Create report directory and move coverage report
                                mkdir -p reports
                                mv coverage reports/
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-frontend/test-results.xml'
                            publishHTML target: [
                                reportName: 'Frontend Coverage Report',
                                reportDir: 'bugtracker-frontend/reports/coverage',
                                reportFiles: 'index.html',
                            ]
                        }
                    }
                }
            }
        }

        stage('Launch Application') {
            agent {
                docker {
                    image 'docker:27.5.1'
                    reuseNode true
                    args '-v. /var/run/docker.sock:/var/run/docker.sock. -u 0S'
                }
            }

            steps {
                sh 'docker compose up --build -d'
            }
        }
  
    }

    post {
        always {
            cleanWs()
        }
    }
}